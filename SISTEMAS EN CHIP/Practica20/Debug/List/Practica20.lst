
AVRASM ver. 2.1.30  C:\Users\Eduardo_SH\Documents\IPN\ESCOM\Semestre_6\SC\Practica20\Debug\List\Practica20.asm Sun Jan 15 12:12:23 2023

C:\Users\Eduardo_SH\Documents\IPN\ESCOM\Semestre_6\SC\Practica20\Debug\List\Practica20.asm(1415): warning: Register r5 already defined by the .DEF directive
C:\Users\Eduardo_SH\Documents\IPN\ESCOM\Semestre_6\SC\Practica20\Debug\List\Practica20.asm(1416): warning: Register r4 already defined by the .DEF directive
C:\Users\Eduardo_SH\Documents\IPN\ESCOM\Semestre_6\SC\Practica20\Debug\List\Practica20.asm(1417): warning: Register r6 already defined by the .DEF directive
C:\Users\Eduardo_SH\Documents\IPN\ESCOM\Semestre_6\SC\Practica20\Debug\List\Practica20.asm(1418): warning: Register r7 already defined by the .DEF directive
C:\Users\Eduardo_SH\Documents\IPN\ESCOM\Semestre_6\SC\Practica20\Debug\List\Practica20.asm(1419): warning: Register r8 already defined by the .DEF directive
C:\Users\Eduardo_SH\Documents\IPN\ESCOM\Semestre_6\SC\Practica20\Debug\List\Practica20.asm(1420): warning: Register r9 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.48b 
                 ;(C) Copyright 1998-2022 Pavel Haiduc, HP InfoTech S.R.L.
                 ;http://www.hpinfotech.ro
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega8535
                 ;Program type           : Application
                 ;Clock frequency        : 1.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 128 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega8535
                 	#pragma AVRPART MEMORY PROG_FLASH 8192
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 512
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU SPMCSR=0x37
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x025F
                 	.EQU __DSTACK_SIZE=0x0080
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.EQU __FLASH_PAGE_SIZE=0x20
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETW1P
                 	LD   R30,X+
                 	LD   R31,X
                 	SBIW R26,1
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD1P_INC
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X+
                 	LD   R23,X+
                 	.ENDM
                 
                 	.MACRO __GETD1P_DEC
                 	LD   R23,-X
                 	LD   R22,-X
                 	LD   R31,-X
                 	LD   R30,-X
                 	.ENDM
                 
                 	.MACRO __PUTDP1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTDP1_DEC
                 	ST   -X,R23
                 	ST   -X,R22
                 	ST   -X,R31
                 	ST   -X,R30
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __CPD10
                 	SBIW R30,0
                 	SBCI R22,0
                 	SBCI R23,0
                 	.ENDM
                 
                 	.MACRO __CPD20
                 	SBIW R26,0
                 	SBCI R24,0
                 	SBCI R25,0
                 	.ENDM
                 
                 	.MACRO __ADDD12
                 	ADD  R30,R26
                 	ADC  R31,R27
                 	ADC  R22,R24
                 	ADC  R23,R25
                 	.ENDM
                 
                 	.MACRO __ADDD21
                 	ADD  R26,R30
                 	ADC  R27,R31
                 	ADC  R24,R22
                 	ADC  R25,R23
                 	.ENDM
                 
                 	.MACRO __SUBD12
                 	SUB  R30,R26
                 	SBC  R31,R27
                 	SBC  R22,R24
                 	SBC  R23,R25
                 	.ENDM
                 
                 	.MACRO __SUBD21
                 	SUB  R26,R30
                 	SBC  R27,R31
                 	SBC  R24,R22
                 	SBC  R25,R23
                 	.ENDM
                 
                 	.MACRO __ANDD12
                 	AND  R30,R26
                 	AND  R31,R27
                 	AND  R22,R24
                 	AND  R23,R25
                 	.ENDM
                 
                 	.MACRO __ORD12
                 	OR   R30,R26
                 	OR   R31,R27
                 	OR   R22,R24
                 	OR   R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD12
                 	EOR  R30,R26
                 	EOR  R31,R27
                 	EOR  R22,R24
                 	EOR  R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD21
                 	EOR  R26,R30
                 	EOR  R27,R31
                 	EOR  R24,R22
                 	EOR  R25,R23
                 	.ENDM
                 
                 	.MACRO __COMD1
                 	COM  R30
                 	COM  R31
                 	COM  R22
                 	COM  R23
                 	.ENDM
                 
                 	.MACRO __MULD2_2
                 	LSL  R26
                 	ROL  R27
                 	ROL  R24
                 	ROL  R25
                 	.ENDM
                 
                 	.MACRO __LSRD1
                 	LSR  R23
                 	ROR  R22
                 	ROR  R31
                 	ROR  R30
                 	.ENDM
                 
                 	.MACRO __LSLD1
                 	LSL  R30
                 	ROL  R31
                 	ROL  R22
                 	ROL  R23
                 	.ENDM
                 
                 	.MACRO __ASRB4
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	.ENDM
                 
                 	.MACRO __ASRW8
                 	MOV  R30,R31
                 	CLR  R31
                 	SBRC R30,7
                 	SER  R31
                 	.ENDM
                 
                 	.MACRO __LSRD16
                 	MOV  R30,R22
                 	MOV  R31,R23
                 	LDI  R22,0
                 	LDI  R23,0
                 	.ENDM
                 
                 	.MACRO __LSLD16
                 	MOV  R22,R30
                 	MOV  R23,R31
                 	LDI  R30,0
                 	LDI  R31,0
                 	.ENDM
                 
                 	.MACRO __CWD1
                 	MOV  R22,R31
                 	ADD  R22,R22
                 	SBC  R22,R22
                 	MOV  R23,R22
                 	.ENDM
                 
                 	.MACRO __CWD2
                 	MOV  R24,R27
                 	ADD  R24,R24
                 	SBC  R24,R24
                 	MOV  R25,R24
                 	.ENDM
                 
                 	.MACRO __SETMSD1
                 	SER  R31
                 	SER  R22
                 	SER  R23
                 	.ENDM
                 
                 	.MACRO __ADDW1R15
                 	CLR  R0
                 	ADD  R30,R15
                 	ADC  R31,R0
                 	.ENDM
                 
                 	.MACRO __ADDW2R15
                 	CLR  R0
                 	ADD  R26,R15
                 	ADC  R27,R0
                 	.ENDM
                 
                 	.MACRO __EQB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __NEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRNE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __CPW01
                 	CLR  R0
                 	CP   R0,R30
                 	CPC  R0,R31
                 	.ENDM
                 
                 	.MACRO __CPW02
                 	CLR  R0
                 	CP   R0,R26
                 	CPC  R0,R27
                 	.ENDM
                 
                 	.MACRO __CPD12
                 	CP   R30,R26
                 	CPC  R31,R27
                 	CPC  R22,R24
                 	CPC  R23,R25
                 	.ENDM
                 
                 	.MACRO __CPD21
                 	CP   R26,R30
                 	CPC  R27,R31
                 	CPC  R24,R22
                 	CPC  R25,R23
                 	.ENDM
                 
                 	.MACRO __BSTB1
                 	CLT
                 	TST  R30
                 	BREQ PC+2
                 	SET
                 	.ENDM
                 
                 	.MACRO __LNEGB1
                 	TST  R30
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LNEGW1
                 	OR   R30,R31
                 	LDI  R30,1
                 	BREQ PC+2
                 	LDI  R30,0
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	RCALL __GETW1Z
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	RCALL __GETD1Z
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __GETW2X
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __GETD2X
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _player_1_score=R5
                 	.DEF _player_2_score=R4
                 	.DEF _i=R6
                 	.DEF _i_msb=R7
                 	.DEF _j=R8
                 	.DEF _j_msb=R9
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 c02b      	RJMP __RESET
000001 cffe      	RJMP 0x00
000002 cffd      	RJMP 0x00
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 cffa      	RJMP 0x00
000006 cff9      	RJMP 0x00
000007 cff8      	RJMP 0x00
000008 cff7      	RJMP 0x00
000009 cff6      	RJMP 0x00
00000a cff5      	RJMP 0x00
00000b cff4      	RJMP 0x00
00000c cff3      	RJMP 0x00
00000d cff2      	RJMP 0x00
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
000011 cfee      	RJMP 0x00
000012 cfed      	RJMP 0x00
000013 cfec      	RJMP 0x00
000014 cfeb      	RJMP 0x00
                 
                 _display_table:
000015 063f
000016 4f5b
000017 6d66
000018 077c      	.DB  0x3F,0x6,0x5B,0x4F,0x66,0x6D,0x7C,0x7
000019 6f7f      	.DB  0x7F,0x6F
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
00001a 0001      	.DW  0x0001
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00001b 0000      	.DB  0x0,0x0
                 
                 _0x2000060:
C:\Users\Eduardo_SH\Documents\IPN\ESCOM\Semestre_6\SC\Practica20\Debug\List\Practica20.asm(1464): warning: .cseg .db misalignment - padding zero byte
00001c 0001      	.DB  0x1
                 _0x2000000:
00001d 4e2d
00001e 4e41
00001f 4900
000020 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\Users\Eduardo_SH\Documents\IPN\ESCOM\Semestre_6\SC\Practica20\Debug\List\Practica20.asm(1467): warning: .cseg .db misalignment - padding zero byte
000021 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
000022 0002      	.DW  0x02
000023 0002      	.DW  0x02
000024 0034      	.DW  __REG_BIT_VARS*2
                 
000025 0002      	.DW  0x02
000026 0004      	.DW  0x04
000027 0036      	.DW  __REG_VARS*2
                 
000028 0001      	.DW  0x01
000029 00ec      	.DW  __seed_G100
00002a 0038      	.DW  _0x2000060*2
                 
                 _0xFFFFFFFF:
00002b 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00002c 94f8      	CLI
00002d 27ee      	CLR  R30
00002e bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00002f e0f1      	LDI  R31,1
000030 bffb      	OUT  GICR,R31
000031 bfeb      	OUT  GICR,R30
000032 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000033 e08d      	LDI  R24,(14-2)+1
000034 e0a2      	LDI  R26,2
000035 27bb      	CLR  R27
                 __CLEAR_REG:
000036 93ed      	ST   X+,R30
000037 958a      	DEC  R24
000038 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000039 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00003a e092      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00003b e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00003c 93ed      	ST   X+,R30
00003d 9701      	SBIW R24,1
00003e f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00003f e4e4      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000040 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000041 9185      	LPM  R24,Z+
000042 9195      	LPM  R25,Z+
000043 9700      	SBIW R24,0
000044 f061      	BREQ __GLOBAL_INI_END
000045 91a5      	LPM  R26,Z+
000046 91b5      	LPM  R27,Z+
000047 9005      	LPM  R0,Z+
000048 9015      	LPM  R1,Z+
000049 01bf      	MOVW R22,R30
00004a 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00004b 9005      	LPM  R0,Z+
00004c 920d      	ST   X+,R0
00004d 9701      	SBIW R24,1
00004e f7e1      	BRNE __GLOBAL_INI_LOOP
00004f 01fb      	MOVW R30,R22
000050 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000051 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000052 bfed      	OUT  SPL,R30
000053 e0e2      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000054 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000055 eec0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000056 e0d0      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000057 c000      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0xE0
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;void set_ball_speed(int);
                 ;void set_game();
                 ;void paint();
                 ;void paint_scoreboard();
                 ;void check_changes();
                 ;void update_ball();
                 ;void check_pause_reset();
                 ;void main(void)
                 ; 0000 0045 {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0046 // Declare your local variables here
                 ; 0000 0047 
                 ; 0000 0048 // Input/Output Ports initialization
                 ; 0000 0049 // Port A initialization
                 ; 0000 004A // Function: Bit7=Out Bit6=Out Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 004B DDRA=(1<<DDA7) | (1<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
000058 ece0      	LDI  R30,LOW(192)
000059 bbea      	OUT  0x1A,R30
                 ; 0000 004C // State: Bit7=0 Bit6=0 Bit5=P Bit4=P Bit3=P Bit2=P Bit1=P Bit0=P
                 ; 0000 004D PORTA=(0<<PORTA7) | (0<<PORTA6) | (1<<PORTA5) | (1<<PORTA4) | (1<<PORTA3) | (1<<PORTA2) | (1<<PORTA1) | (1<<PORTA0);
00005a e3ef      	LDI  R30,LOW(63)
00005b bbeb      	OUT  0x1B,R30
                 ; 0000 004E 
                 ; 0000 004F // Port B initialization
                 ; 0000 0050 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 0051 DDRB=(1<<DDB7) | (1<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
00005c efef      	LDI  R30,LOW(255)
00005d bbe7      	OUT  0x17,R30
                 ; 0000 0052 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0000 0053 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
00005e e0e0      	LDI  R30,LOW(0)
00005f bbe8      	OUT  0x18,R30
                 ; 0000 0054 
                 ; 0000 0055 // Port C initialization
                 ; 0000 0056 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 0057 DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
000060 efef      	LDI  R30,LOW(255)
000061 bbe4      	OUT  0x14,R30
                 ; 0000 0058 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0000 0059 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
000062 e0e0      	LDI  R30,LOW(0)
000063 bbe5      	OUT  0x15,R30
                 ; 0000 005A 
                 ; 0000 005B // Port D initialization
                 ; 0000 005C // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 005D DDRD=(1<<DDD7) | (1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
000064 efef      	LDI  R30,LOW(255)
000065 bbe1      	OUT  0x11,R30
                 ; 0000 005E // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0000 005F PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
000066 e0e0      	LDI  R30,LOW(0)
000067 bbe2      	OUT  0x12,R30
                 ; 0000 0060 
                 ; 0000 0061 // Timer/Counter 0 initialization
                 ; 0000 0062 // Clock source: System Clock
                 ; 0000 0063 // Clock value: Timer 0 Stopped
                 ; 0000 0064 // Mode: Normal top=0xFF
                 ; 0000 0065 // OC0 output: Disconnected
                 ; 0000 0066 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
000068 bfe3      	OUT  0x33,R30
                 ; 0000 0067 TCNT0=0x00;
000069 bfe2      	OUT  0x32,R30
                 ; 0000 0068 OCR0=0x00;
00006a bfec      	OUT  0x3C,R30
                 ; 0000 0069 
                 ; 0000 006A // Timer/Counter 1 initialization
                 ; 0000 006B // Clock source: System Clock
                 ; 0000 006C // Clock value: Timer1 Stopped
                 ; 0000 006D // Mode: Normal top=0xFFFF
                 ; 0000 006E // OC1A output: Disconnected
                 ; 0000 006F // OC1B output: Disconnected
                 ; 0000 0070 // Noise Canceler: Off
                 ; 0000 0071 // Input Capture on Falling Edge
                 ; 0000 0072 // Timer1 Overflow Interrupt: Off
                 ; 0000 0073 // Input Capture Interrupt: Off
                 ; 0000 0074 // Compare A Match Interrupt: Off
                 ; 0000 0075 // Compare B Match Interrupt: Off
                 ; 0000 0076 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
00006b bdef      	OUT  0x2F,R30
                 ; 0000 0077 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
00006c bdee      	OUT  0x2E,R30
                 ; 0000 0078 TCNT1H=0x00;
00006d bded      	OUT  0x2D,R30
                 ; 0000 0079 TCNT1L=0x00;
00006e bdec      	OUT  0x2C,R30
                 ; 0000 007A ICR1H=0x00;
00006f bde7      	OUT  0x27,R30
                 ; 0000 007B ICR1L=0x00;
000070 bde6      	OUT  0x26,R30
                 ; 0000 007C OCR1AH=0x00;
000071 bdeb      	OUT  0x2B,R30
                 ; 0000 007D OCR1AL=0x00;
000072 bdea      	OUT  0x2A,R30
                 ; 0000 007E OCR1BH=0x00;
000073 bde9      	OUT  0x29,R30
                 ; 0000 007F OCR1BL=0x00;
000074 bde8      	OUT  0x28,R30
                 ; 0000 0080 
                 ; 0000 0081 // Timer/Counter 2 initialization
                 ; 0000 0082 // Clock source: System Clock
                 ; 0000 0083 // Clock value: Timer2 Stopped
                 ; 0000 0084 // Mode: Normal top=0xFF
                 ; 0000 0085 // OC2 output: Disconnected
                 ; 0000 0086 ASSR=0<<AS2;
000075 bde2      	OUT  0x22,R30
                 ; 0000 0087 TCCR2=(0<<WGM20) | (0<<COM21) | (0<<COM20) | (0<<WGM21) | (0<<CS22) | (0<<CS21) | (0<<CS20);
000076 bde5      	OUT  0x25,R30
                 ; 0000 0088 TCNT2=0x00;
000077 bde4      	OUT  0x24,R30
                 ; 0000 0089 OCR2=0x00;
000078 bde3      	OUT  0x23,R30
                 ; 0000 008A 
                 ; 0000 008B // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 008C TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
000079 bfe9      	OUT  0x39,R30
                 ; 0000 008D 
                 ; 0000 008E // External Interrupt(s) initialization
                 ; 0000 008F // INT0: Off
                 ; 0000 0090 // INT1: Off
                 ; 0000 0091 // INT2: Off
                 ; 0000 0092 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
00007a bfe5      	OUT  0x35,R30
                 ; 0000 0093 MCUCSR=(0<<ISC2);
00007b bfe4      	OUT  0x34,R30
                 ; 0000 0094 
                 ; 0000 0095 // USART initialization
                 ; 0000 0096 // USART disabled
                 ; 0000 0097 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
00007c b9ea      	OUT  0xA,R30
                 ; 0000 0098 
                 ; 0000 0099 // Analog Comparator initialization
                 ; 0000 009A // Analog Comparator: Off
                 ; 0000 009B // The Analog Comparator's positive input is
                 ; 0000 009C // connected to the AIN0 pin
                 ; 0000 009D // The Analog Comparator's negative input is
                 ; 0000 009E // connected to the AIN1 pin
                 ; 0000 009F ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
00007d e8e0      	LDI  R30,LOW(128)
00007e b9e8      	OUT  0x8,R30
                 ; 0000 00A0 SFIOR=(0<<ACME);
00007f e0e0      	LDI  R30,LOW(0)
000080 bfe0      	OUT  0x30,R30
                 ; 0000 00A1 
                 ; 0000 00A2 // ADC initialization
                 ; 0000 00A3 // ADC disabled
                 ; 0000 00A4 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
000081 b9e6      	OUT  0x6,R30
                 ; 0000 00A5 
                 ; 0000 00A6 // SPI initialization
                 ; 0000 00A7 // SPI disabled
                 ; 0000 00A8 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
000082 b9ed      	OUT  0xD,R30
                 ; 0000 00A9 
                 ; 0000 00AA // TWI initialization
                 ; 0000 00AB // TWI disabled
                 ; 0000 00AC TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
000083 bfe6      	OUT  0x36,R30
                 ; 0000 00AD 
                 ; 0000 00AE set_game();
000084 d021      	RCALL _set_game
                 ; 0000 00AF set_ball_speed(1);
000085 d158      	RCALL SUBOPT_0x0
000086 d014      	RCALL _set_ball_speed
                 ; 0000 00B0 
                 ; 0000 00B1 
                 ; 0000 00B2 while (1)
                 _0x3:
                 ; 0000 00B3 {
                 ; 0000 00B4 if (pause == 0) {
000087 fc20      	SBRC R2,0
000088 c00e      	RJMP _0x6
                 ; 0000 00B5 for (j = 0; j < BALL_SPEED; j++) {
000089 2488      	CLR  R8
00008a 2499      	CLR  R9
                 _0x8:
00008b e1ee      	LDI  R30,LOW(30)
00008c e0f0      	LDI  R31,HIGH(30)
00008d 168e      	CP   R8,R30
00008e 069f      	CPC  R9,R31
00008f f434      	BRGE _0x9
                 ; 0000 00B6 paint();
000090 d0fc      	RCALL _paint
                 ; 0000 00B7 check_changes();
000091 d0ab      	RCALL _check_changes
                 ; 0000 00B8 }
000092 01f4      	MOVW R30,R8
000093 9631      	ADIW R30,1
000094 014f      	MOVW R8,R30
000095 cff5      	RJMP _0x8
                 _0x9:
                 ; 0000 00B9 update_ball();
000096 d021      	RCALL _update_ball
                 ; 0000 00BA }
                 ; 0000 00BB paint();
                 _0x6:
000097 d0f5      	RCALL _paint
                 ; 0000 00BC check_pause_reset();
000098 d089      	RCALL _check_pause_reset
                 ; 0000 00BD }
000099 cfed      	RJMP _0x3
                 ; 0000 00BE }
                 _0xA:
00009a cfff      	RJMP _0xA
                 ; .FEND
                 ;void set_ball_speed(int speed){
                 ; 0000 00C0 void set_ball_speed(int speed){
                 _set_ball_speed:
                 ; .FSTART _set_ball_speed
                 ; 0000 00C1 ball.col_vel = speed;
00009b d1bb      	RCALL __SAVELOCR2
00009c 018d      	MOVW R16,R26
                 ;	speed -> R16,R17
                +
00009d 9300 00e8+STS _ball + ( 4 ) , R16
00009f 9310 00e9+STS _ball + ( 4 ) + 1 , R17
                 	__PUTWMRN _ball,4,16,17
                 ; 0000 00C2 ball.row_vel = speed;
                +
0000a1 9300 00ea+STS _ball + ( 6 ) , R16
0000a3 9310 00eb+STS _ball + ( 6 ) + 1 , R17
                 	__PUTWMRN _ball,6,16,17
                 ; 0000 00C3 }
0000a5 c119      	RJMP _0x2080001
                 ; .FEND
                 ;void set_game(){
                 ; 0000 00C5 void set_game(){
                 _set_game:
                 ; .FSTART _set_game
                 ; 0000 00C6 player_1_score = 0;
0000a6 2455      	CLR  R5
                 ; 0000 00C7 player_2_score = 0;
0000a7 2444      	CLR  R4
                 ; 0000 00C8 player_1.col = 6;
0000a8 e0e6      	LDI  R30,LOW(6)
0000a9 d137      	RCALL SUBOPT_0x1
                 ; 0000 00C9 player_1.row = H - 1;
0000aa e0e7      	LDI  R30,LOW(7)
                +
0000ab 93e0 00e1+STS _player_1 + ( 1 ) , R30
                 	__PUTB1MN _player_1,1
                 ; 0000 00CA 
                 ; 0000 00CB pause = 1;
0000ad 9468      	SET
0000ae f820      	BLD  R2,0
                 ; 0000 00CC 
                 ; 0000 00CD player_2.col = 0;
0000af e0e0      	LDI  R30,LOW(0)
0000b0 d133      	RCALL SUBOPT_0x2
                 ; 0000 00CE player_2.row = 0;
0000b1 e0e0      	LDI  R30,LOW(0)
                +
0000b2 93e0 00e3+STS _player_2 + ( 1 ) , R30
                 	__PUTB1MN _player_2,1
                 ; 0000 00CF 
                 ; 0000 00D0 ball.col = 3;
0000b4 d132      	RCALL SUBOPT_0x3
0000b5 d134      	RCALL SUBOPT_0x4
                 ; 0000 00D1 ball.row = 3;
0000b6 d138      	RCALL SUBOPT_0x5
                 ; 0000 00D2 }
0000b7 9508      	RET
                 ; .FEND
                 ;void update_ball() {
                 ; 0000 00D5 void update_ball() {
                 _update_ball:
                 ; .FSTART _update_ball
                 ; 0000 00D6 
                 ; 0000 00D7 ball.col += ball.col_vel;
0000b8 d13c      	RCALL SUBOPT_0x6
0000b9 d140      	RCALL SUBOPT_0x7
0000ba 0fea      	ADD  R30,R26
0000bb 1ffb      	ADC  R31,R27
0000bc d12d      	RCALL SUBOPT_0x4
                 ; 0000 00D8 if (ball.col >= W || ball.col < 0) {
0000bd d13c      	RCALL SUBOPT_0x7
0000be 9718      	SBIW R26,8
0000bf f424      	BRGE _0xC
0000c0 91a0 00e5 	LDS  R26,_ball+1
0000c2 23aa      	TST  R26
0000c3 f44a      	BRPL _0xB
                 _0xC:
                 ; 0000 00D9 ball.col_vel *= -1;
0000c4 d13a      	RCALL SUBOPT_0x8
0000c5 d13e      	RCALL SUBOPT_0x9
0000c6 d141      	RCALL SUBOPT_0xA
                 ; 0000 00DA ball.col += 2 * ball.col_vel;
0000c7 d12d      	RCALL SUBOPT_0x6
0000c8 0fee      	LSL  R30
0000c9 1fff      	ROL  R31
0000ca d12f      	RCALL SUBOPT_0x7
0000cb d141      	RCALL SUBOPT_0xB
0000cc d11d      	RCALL SUBOPT_0x4
                 ; 0000 00DB }
                 ; 0000 00DC 
                 ; 0000 00DD ball.row += ball.row_vel;
                 _0xB:
0000cd d142      	RCALL SUBOPT_0xC
0000ce d146      	RCALL SUBOPT_0xD
                 ; 0000 00DE // If the ball is in the vertical borders, check if it bounces
                 ; 0000 00DF if (ball.row == H - 1) {
0000cf d140      	RCALL SUBOPT_0xC
0000d0 9717      	SBIW R26,7
0000d1 f4c1      	BRNE _0xE
                 ; 0000 00E0 if (ball.col == player_1.col || ball.col == player_1.col + 1) {
0000d2 d14c      	RCALL SUBOPT_0xE
0000d3 d14e      	RCALL SUBOPT_0xF
0000d4 f019      	BREQ _0x10
0000d5 d149      	RCALL SUBOPT_0xE
0000d6 d150      	RCALL SUBOPT_0x10
0000d7 f441      	BRNE _0xF
                 _0x10:
                 ; 0000 00E1 ball.row_vel *= -1;
0000d8 d154      	RCALL SUBOPT_0x11
0000d9 d158      	RCALL SUBOPT_0x12
                 ; 0000 00E2 ball.col_vel *= (1 - 2*(rand() % 2));
0000da d15c      	RCALL SUBOPT_0x13
0000db d1b2      	RCALL __MULW12
0000dc d12b      	RCALL SUBOPT_0xA
                 ; 0000 00E3 ball.row += ball.row_vel;
0000dd d132      	RCALL SUBOPT_0xC
0000de d136      	RCALL SUBOPT_0xD
                 ; 0000 00E4 } else {
0000df c00a      	RJMP _0x12
                 _0xF:
                 ; 0000 00E5 player_2_score++;
0000e0 9443      	INC  R4
                 ; 0000 00E6 ball.col = 3;
0000e1 d105      	RCALL SUBOPT_0x3
0000e2 d107      	RCALL SUBOPT_0x4
                 ; 0000 00E7 ball.row = 3;
0000e3 d10b      	RCALL SUBOPT_0x5
                 ; 0000 00E8 ball.col_vel = -1;
0000e4 efef      	LDI  R30,LOW(65535)
0000e5 efff      	LDI  R31,HIGH(65535)
0000e6 d121      	RCALL SUBOPT_0xA
                 ; 0000 00E9 ball.row_vel = -1;
0000e7 efef      	LDI  R30,LOW(65535)
0000e8 efff      	LDI  R31,HIGH(65535)
0000e9 d148      	RCALL SUBOPT_0x12
                 ; 0000 00EA }
                 _0x12:
                 ; 0000 00EB }
                 ; 0000 00EC if (ball.row == 0) {
                 _0xE:
                +
0000ea 91e0 00e6+LDS R30 , _ball + ( 2 )
0000ec 91f0 00e7+LDS R31 , _ball + ( 2 ) + 1
                 	__GETW1MN _ball,2
0000ee 9730      	SBIW R30,0
0000ef f501      	BRNE _0x13
                 ; 0000 00ED if (ball.col == player_2.col || ball.col == player_2.col + 1) {
0000f0 d153      	RCALL SUBOPT_0x14
0000f1 d130      	RCALL SUBOPT_0xF
0000f2 f019      	BREQ _0x15
0000f3 d150      	RCALL SUBOPT_0x14
0000f4 d132      	RCALL SUBOPT_0x10
0000f5 f439      	BRNE _0x14
                 _0x15:
                 ; 0000 00EE ball.row_vel *= -1;
0000f6 d136      	RCALL SUBOPT_0x11
0000f7 d13a      	RCALL SUBOPT_0x12
                 ; 0000 00EF ball.row += ball.row_vel;
0000f8 d117      	RCALL SUBOPT_0xC
0000f9 d11b      	RCALL SUBOPT_0xD
                 ; 0000 00F0 ball.col_vel *= (1 - 2*(rand() % 2));
0000fa d13c      	RCALL SUBOPT_0x13
0000fb d192      	RCALL __MULW12
0000fc c00f      	RJMP _0x43
                 ; 0000 00F1 } else {
                 _0x14:
                 ; 0000 00F2 player_1_score++;
0000fd 9453      	INC  R5
                 ; 0000 00F3 ball.col = 4;
0000fe e0e4      	LDI  R30,LOW(4)
0000ff e0f0      	LDI  R31,HIGH(4)
000100 d0e9      	RCALL SUBOPT_0x4
                 ; 0000 00F4 ball.row = 4;
000101 e0e4      	LDI  R30,LOW(4)
000102 e0f0      	LDI  R31,HIGH(4)
                +
000103 93e0 00e6+STS _ball + ( 2 ) , R30
000105 93f0 00e7+STS _ball + ( 2 ) + 1 , R31
                 	__PUTW1MN _ball,2
                 ; 0000 00F5 ball.row_vel = 1;
000107 e0e1      	LDI  R30,LOW(1)
000108 e0f0      	LDI  R31,HIGH(1)
000109 d128      	RCALL SUBOPT_0x12
                 ; 0000 00F6 ball.col_vel = 1;
00010a e0e1      	LDI  R30,LOW(1)
00010b e0f0      	LDI  R31,HIGH(1)
                 _0x43:
                +
00010c 93e0 00e8+STS _ball + ( 4 ) , R30
00010e 93f0 00e9+STS _ball + ( 4 ) + 1 , R31
                 	__PUTW1MN _ball,4
                 ; 0000 00F7 }
                 ; 0000 00F8 }
                 ; 0000 00F9 //Check if one of the players has already gotten more than 9 points, if so, the games resets
                 ; 0000 00FA if (player_1_score > 9 || player_2_score > 9) {
                 _0x13:
000110 e0e9      	LDI  R30,LOW(9)
000111 15e5      	CP   R30,R5
000112 f010      	BRLO _0x19
000113 15e4      	CP   R30,R4
000114 f408      	BRSH _0x18
                 _0x19:
                 ; 0000 00FB set_game();
000115 df90      	RCALL _set_game
                 ; 0000 00FC }
                 ; 0000 00FD }
                 _0x18:
000116 9508      	RET
                 ; .FEND
                 ;void paint_scoreboard() {
                 ; 0000 00FF void paint_scoreboard() {
                 _paint_scoreboard:
                 ; .FSTART _paint_scoreboard
                 ; 0000 0100 //MUX
                 ; 0000 0101 PORTA.6 = 0;
000117 98de      	CBI  0x1B,6
                 ; 0000 0102 PORTA.7 = 1;
000118 9adf      	SBI  0x1B,7
                 ; 0000 0103 PORTB = display_table[player_2_score];
000119 2de4      	MOV  R30,R4
00011a d12c      	RCALL SUBOPT_0x15
                 ; 0000 0104 delay_ms(1);
00011b d1ad      	RCALL _delay_ms
                 ; 0000 0105 //MUX
                 ; 0000 0106 PORTA.6 = 1;
00011c 9ade      	SBI  0x1B,6
                 ; 0000 0107 PORTA.7 = 0;
00011d 98df      	CBI  0x1B,7
                 ; 0000 0108 PORTB = display_table[player_1_score];
00011e 2de5      	MOV  R30,R5
00011f d127      	RCALL SUBOPT_0x15
                 ; 0000 0109 delay_ms(1);
000120 d1a8      	RCALL _delay_ms
                 ; 0000 010A }
000121 9508      	RET
                 ; .FEND
                 ;void check_pause_reset() {
                 ; 0000 010C void check_pause_reset() {
                 _check_pause_reset:
                 ; .FSTART _check_pause_reset
                 ; 0000 010D cu_pause = PINA.0;
000122 94e8      	CLT
000123 99c8      	SBIC 0x19,0
000124 9468      	SET
000125 f831      	BLD  R3,1
                 ; 0000 010E cu_reset = PINA.1;
000126 94e8      	CLT
000127 99c9      	SBIC 0x19,1
000128 9468      	SET
000129 f833      	BLD  R3,3
                 ; 0000 010F 
                 ; 0000 0110 if (cu_pause == 0 && la_pause == 1) {
00012a fc31      	SBRC R3,1
00012b c002      	RJMP _0x24
00012c fc32      	SBRC R3,2
00012d c001      	RJMP _0x25
                 _0x24:
00012e c002      	RJMP _0x23
                 _0x25:
                 ; 0000 0111 pause = ~pause;
00012f e0e1      	LDI  R30,LOW(1)
000130 262e      	EOR  R2,R30
                 ; 0000 0112 }
                 ; 0000 0113 if (cu_reset == 0 && la_reset == 1) {
                 _0x23:
000131 fc33      	SBRC R3,3
000132 c002      	RJMP _0x27
000133 fc34      	SBRC R3,4
000134 c001      	RJMP _0x28
                 _0x27:
000135 c001      	RJMP _0x26
                 _0x28:
                 ; 0000 0114 set_game();
000136 df6f      	RCALL _set_game
                 ; 0000 0115 }
                 ; 0000 0116 
                 ; 0000 0117 la_pause = cu_pause;
                 _0x26:
000137 fa31      	BST  R3,1
000138 f832      	BLD  R3,2
                 ; 0000 0118 la_reset = cu_reset;
000139 fa33      	BST  R3,3
00013a f834      	BLD  R3,4
                 ; 0000 0119 paint_scoreboard();
00013b dfdb      	RCALL _paint_scoreboard
                 ; 0000 011A }
00013c 9508      	RET
                 ; .FEND
                 ;void check_changes() {
                 ; 0000 011C void check_changes() {
                 _check_changes:
                 ; .FSTART _check_changes
                 ; 0000 011D cu_left_1 = PINA.2;
00013d 94e8      	CLT
00013e 99ca      	SBIC 0x19,2
00013f 9468      	SET
000140 f821      	BLD  R2,1
                 ; 0000 011E cu_left_2 = PINA.4;
000141 94e8      	CLT
000142 99cc      	SBIC 0x19,4
000143 9468      	SET
000144 f823      	BLD  R2,3
                 ; 0000 011F cu_right_1 = PINA.3;
000145 94e8      	CLT
000146 99cb      	SBIC 0x19,3
000147 9468      	SET
000148 f825      	BLD  R2,5
                 ; 0000 0120 cu_right_2 = PINA.5;
000149 94e8      	CLT
00014a 99cd      	SBIC 0x19,5
00014b 9468      	SET
00014c f827      	BLD  R2,7
                 ; 0000 0121 
                 ; 0000 0122 // Checking for player_1 movement
                 ; 0000 0123 if (cu_left_1 == 0 && la_left_1 == 1) {
00014d fc21      	SBRC R2,1
00014e c002      	RJMP _0x2A
00014f fc22      	SBRC R2,2
000150 c001      	RJMP _0x2B
                 _0x2A:
000151 c008      	RJMP _0x29
                 _0x2B:
                 ; 0000 0124 if (player_1.col - 1 >= 0) player_1.col -= 1;
000152 d0cc      	RCALL SUBOPT_0xE
000153 e0f0      	LDI  R31,0
000154 9731      	SBIW R30,1
000155 23ff      	TST  R31
000156 f01a      	BRMI _0x2C
000157 d0c7      	RCALL SUBOPT_0xE
000158 50e1      	SUBI R30,LOW(1)
000159 d087      	RCALL SUBOPT_0x1
                 ; 0000 0125 }
                 _0x2C:
                 ; 0000 0126 if (cu_right_1 == 0 && la_right_1 == 1) {
                 _0x29:
00015a fc25      	SBRC R2,5
00015b c002      	RJMP _0x2E
00015c fc26      	SBRC R2,6
00015d c001      	RJMP _0x2F
                 _0x2E:
00015e c009      	RJMP _0x2D
                 _0x2F:
                 ; 0000 0127 player_1.col++;
00015f d0bf      	RCALL SUBOPT_0xE
000160 5fef      	SUBI R30,-LOW(1)
000161 d07f      	RCALL SUBOPT_0x1
                 ; 0000 0128 if (player_1.col > W - 2) player_1.col = W - 2;
000162 91a0 00e0 	LDS  R26,_player_1
000164 30a7      	CPI  R26,LOW(0x7)
000165 f010      	BRLO _0x30
000166 e0e6      	LDI  R30,LOW(6)
000167 d079      	RCALL SUBOPT_0x1
                 ; 0000 0129 }
                 _0x30:
                 ; 0000 012A // Checking for player 2 movement
                 ; 0000 012B if (cu_left_2 == 0 && la_left_2 == 1) {
                 _0x2D:
000168 fc23      	SBRC R2,3
000169 c002      	RJMP _0x32
00016a fc24      	SBRC R2,4
00016b c001      	RJMP _0x33
                 _0x32:
00016c c008      	RJMP _0x31
                 _0x33:
                 ; 0000 012C if (player_2.col - 1 >= 0) player_2.col -= 1;
00016d d0d6      	RCALL SUBOPT_0x14
00016e e0f0      	LDI  R31,0
00016f 9731      	SBIW R30,1
000170 23ff      	TST  R31
000171 f01a      	BRMI _0x34
000172 d0d1      	RCALL SUBOPT_0x14
000173 50e1      	SUBI R30,LOW(1)
000174 d06f      	RCALL SUBOPT_0x2
                 ; 0000 012D }
                 _0x34:
                 ; 0000 012E if (cu_right_2 == 0 && la_right_2 == 1) {
                 _0x31:
000175 fc27      	SBRC R2,7
000176 c002      	RJMP _0x36
000177 fc30      	SBRC R3,0
000178 c001      	RJMP _0x37
                 _0x36:
000179 c009      	RJMP _0x35
                 _0x37:
                 ; 0000 012F player_2.col++;
00017a d0c9      	RCALL SUBOPT_0x14
00017b 5fef      	SUBI R30,-LOW(1)
00017c d067      	RCALL SUBOPT_0x2
                 ; 0000 0130 if (player_2.col > W - 2) player_2.col = W - 2;
00017d 91a0 00e2 	LDS  R26,_player_2
00017f 30a7      	CPI  R26,LOW(0x7)
000180 f010      	BRLO _0x38
000181 e0e6      	LDI  R30,LOW(6)
000182 d061      	RCALL SUBOPT_0x2
                 ; 0000 0131 }
                 _0x38:
                 ; 0000 0132 
                 ; 0000 0133 la_left_1 = cu_left_1;
                 _0x35:
000183 fa21      	BST  R2,1
000184 f822      	BLD  R2,2
                 ; 0000 0134 la_left_2 = cu_left_2;
000185 fa23      	BST  R2,3
000186 f824      	BLD  R2,4
                 ; 0000 0135 la_right_1 = cu_right_1;
000187 fa25      	BST  R2,5
000188 f826      	BLD  R2,6
                 ; 0000 0136 la_right_2 = cu_right_2;
000189 fa27      	BST  R2,7
00018a f830      	BLD  R3,0
                 ; 0000 0137 check_pause_reset();
00018b df96      	RCALL _check_pause_reset
                 ; 0000 0138 }
00018c 9508      	RET
                 ; .FEND
                 ;void paint() {
                 ; 0000 013A void paint() {
                 _paint:
                 ; .FSTART _paint
                 ; 0000 013B const unsigned char columns_on = 0xFF;
                 ; 0000 013C unsigned char curr_row = 0x00;
                 ; 0000 013D for (i = 0; i < W; i++) {
00018d d0c9      	RCALL __SAVELOCR2
                 ;	columns_on -> R17
                 ;	curr_row -> R16
00018e ef1f      	LDI  R17,255
00018f e000      	LDI  R16,0
000190 2466      	CLR  R6
000191 2477      	CLR  R7
                 _0x3A:
000192 e0e8      	LDI  R30,LOW(8)
000193 e0f0      	LDI  R31,HIGH(8)
000194 166e      	CP   R6,R30
000195 067f      	CPC  R7,R31
000196 f544      	BRGE _0x3B
                 ; 0000 013E //PORTD = columns_on & ~(1 << i); //Protoboard
                 ; 0000 013F PORTC = columns_on & ~(1 << i);   //Proteus
000197 2de6      	MOV  R30,R6
000198 e0a1      	LDI  R26,LOW(1)
000199 d0c4      	RCALL __LSLB12
00019a 95e0      	COM  R30
00019b 23e1      	AND  R30,R17
00019c bbe5      	OUT  0x15,R30
                 ; 0000 0140 curr_row = 0x00;
00019d e000      	LDI  R16,LOW(0)
                 ; 0000 0141 if (i == player_1.col || i == player_1.col + 1) {
00019e d080      	RCALL SUBOPT_0xE
00019f d0ad      	RCALL SUBOPT_0x16
0001a0 f019      	BREQ _0x3D
0001a1 d07d      	RCALL SUBOPT_0xE
0001a2 d0af      	RCALL SUBOPT_0x17
0001a3 f409      	BRNE _0x3C
                 _0x3D:
                 ; 0000 0142 curr_row |= 0x80;
0001a4 6800      	ORI  R16,LOW(128)
                 ; 0000 0143 }
                 ; 0000 0144 if (i == player_2.col || i == player_2.col + 1) {
                 _0x3C:
0001a5 d09e      	RCALL SUBOPT_0x14
0001a6 d0a6      	RCALL SUBOPT_0x16
0001a7 f019      	BREQ _0x40
0001a8 d09b      	RCALL SUBOPT_0x14
0001a9 d0a8      	RCALL SUBOPT_0x17
0001aa f409      	BRNE _0x3F
                 _0x40:
                 ; 0000 0145 curr_row |= 0x01;
0001ab 6001      	ORI  R16,LOW(1)
                 ; 0000 0146 }
                 ; 0000 0147 if (i == ball.col) {
                 _0x3F:
0001ac 91e0 00e4 	LDS  R30,_ball
0001ae 91f0 00e5 	LDS  R31,_ball+1
0001b0 15e6      	CP   R30,R6
0001b1 05f7      	CPC  R31,R7
0001b2 f429      	BRNE _0x42
                 ; 0000 0148 curr_row |= (1 << ball.row);
                +
0001b3 91e0 00e6+LDS R30 , _ball + ( 2 )
                 	__GETB1MN _ball,2
0001b5 e0a1      	LDI  R26,LOW(1)
0001b6 d0a7      	RCALL __LSLB12
0001b7 2b0e      	OR   R16,R30
                 ; 0000 0149 }
                 ; 0000 014A //PORTC = curr_row;       //Protoboard
                 ; 0000 014B PORTD = curr_row;     //Proteus
                 _0x42:
0001b8 bb02      	OUT  0x12,R16
                 ; 0000 014C delay_ms(1);
0001b9 d024      	RCALL SUBOPT_0x0
0001ba d10e      	RCALL _delay_ms
                 ; 0000 014D }
0001bb 01f3      	MOVW R30,R6
0001bc 9631      	ADIW R30,1
0001bd 013f      	MOVW R6,R30
0001be cfd3      	RJMP _0x3A
                 _0x3B:
                 ; 0000 014E }
                 _0x2080001:
0001bf 9109      	LD   R16,Y+
0001c0 9119      	LD   R17,Y+
0001c1 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 _rand:
                 ; .FSTART _rand
0001c2 91e0 00ec 	LDS  R30,__seed_G100
0001c4 91f0 00ed 	LDS  R31,__seed_G100+1
0001c6 9160 00ee 	LDS  R22,__seed_G100+2
0001c8 9170 00ef 	LDS  R23,__seed_G100+3
                +
0001ca e6ad     +LDI R26 , LOW ( 0x41C64E6D )
0001cb e4be     +LDI R27 , HIGH ( 0x41C64E6D )
0001cc ec86     +LDI R24 , BYTE3 ( 0x41C64E6D )
0001cd e491     +LDI R25 , BYTE4 ( 0x41C64E6D )
                 	__GETD2N 0x41C64E6D
0001ce d09f      	RCALL __MULD12U
                +
0001cf 59ee     +SUBI R30 , LOW ( - 30562 )
0001d0 48f8     +SBCI R31 , HIGH ( - 30562 )
0001d1 4f6f     +SBCI R22 , BYTE3 ( - 30562 )
0001d2 4f7f     +SBCI R23 , BYTE4 ( - 30562 )
                 	__ADDD1N 30562
0001d3 93e0 00ec 	STS  __seed_G100,R30
0001d5 93f0 00ed 	STS  __seed_G100+1,R31
0001d7 9360 00ee 	STS  __seed_G100+2,R22
0001d9 9370 00ef 	STS  __seed_G100+3,R23
0001db 01fb      	movw r30,r22
0001dc 77ff      	andi r31,0x7F
0001dd 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _player_1:
0000e0           	.BYTE 0x2
                 _player_2:
0000e2           	.BYTE 0x2
                 _ball:
0000e4           	.BYTE 0x8
                 __seed_G100:
0000ec           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
0001de e0a1      	LDI  R26,LOW(1)
0001df e0b0      	LDI  R27,0
0001e0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
0001e1 93e0 00e0 	STS  _player_1,R30
0001e3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
0001e4 93e0 00e2 	STS  _player_2,R30
0001e6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
0001e7 e0e3      	LDI  R30,LOW(3)
0001e8 e0f0      	LDI  R31,HIGH(3)
0001e9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x4:
0001ea 93e0 00e4 	STS  _ball,R30
0001ec 93f0 00e5 	STS  _ball+1,R31
0001ee 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x5:
0001ef dff7      	RCALL SUBOPT_0x3
                +
0001f0 93e0 00e6+STS _ball + ( 2 ) , R30
0001f2 93f0 00e7+STS _ball + ( 2 ) + 1 , R31
                 	__PUTW1MN _ball,2
0001f4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
                +
0001f5 91e0 00e8+LDS R30 , _ball + ( 4 )
0001f7 91f0 00e9+LDS R31 , _ball + ( 4 ) + 1
                 	__GETW1MN _ball,4
0001f9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:16 WORDS
                 SUBOPT_0x7:
0001fa 91a0 00e4 	LDS  R26,_ball
0001fc 91b0 00e5 	LDS  R27,_ball+1
0001fe 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x8:
                +
0001ff 91a0 00e8+LDS R26 , _ball + ( 4 )
000201 91b0 00e9+LDS R27 , _ball + ( 4 ) + 1
                 	__GETW2MN _ball,4
000203 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x9:
000204 efef      	LDI  R30,LOW(65535)
000205 efff      	LDI  R31,HIGH(65535)
000206 d087      	RCALL __MULW12
000207 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xA:
                +
000208 93e0 00e8+STS _ball + ( 4 ) , R30
00020a 93f0 00e9+STS _ball + ( 4 ) + 1 , R31
                 	__PUTW1MN _ball,4
00020c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xB:
00020d 0fea      	ADD  R30,R26
00020e 1ffb      	ADC  R31,R27
00020f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0xC:
                +
000210 91a0 00e6+LDS R26 , _ball + ( 2 )
000212 91b0 00e7+LDS R27 , _ball + ( 2 ) + 1
                 	__GETW2MN _ball,2
000214 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:14 WORDS
                 SUBOPT_0xD:
                +
000215 91e0 00ea+LDS R30 , _ball + ( 6 )
000217 91f0 00eb+LDS R31 , _ball + ( 6 ) + 1
                 	__GETW1MN _ball,6
000219 dff3      	RCALL SUBOPT_0xB
                +
00021a 93e0 00e6+STS _ball + ( 2 ) , R30
00021c 93f0 00e7+STS _ball + ( 2 ) + 1 , R31
                 	__PUTW1MN _ball,2
00021e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xE:
00021f 91e0 00e0 	LDS  R30,_player_1
000221 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xF:
000222 dfd7      	RCALL SUBOPT_0x7
000223 e0f0      	LDI  R31,0
000224 17ea      	CP   R30,R26
000225 07fb      	CPC  R31,R27
000226 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x10:
000227 e0f0      	LDI  R31,0
000228 9631      	ADIW R30,1
000229 dfd0      	RCALL SUBOPT_0x7
00022a 17ea      	CP   R30,R26
00022b 07fb      	CPC  R31,R27
00022c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x11:
                +
00022d 91a0 00ea+LDS R26 , _ball + ( 6 )
00022f 91b0 00eb+LDS R27 , _ball + ( 6 ) + 1
                 	__GETW2MN _ball,6
000231 cfd2      	RJMP SUBOPT_0x9
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x12:
                +
000232 93e0 00ea+STS _ball + ( 6 ) , R30
000234 93f0 00eb+STS _ball + ( 6 ) + 1 , R31
                 	__PUTW1MN _ball,6
000236 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x13:
000237 df8a      	RCALL _rand
000238 01df      	MOVW R26,R30
000239 e0e2      	LDI  R30,LOW(2)
00023a e0f0      	LDI  R31,HIGH(2)
00023b d06a      	RCALL __MODW21
00023c 0fee      	LSL  R30
00023d 1fff      	ROL  R31
00023e e0a1      	LDI  R26,LOW(1)
00023f e0b0      	LDI  R27,HIGH(1)
000240 d081      	RCALL __SWAPW12
000241 1bea      	SUB  R30,R26
000242 0bfb      	SBC  R31,R27
000243 cfbb      	RJMP SUBOPT_0x8
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x14:
000244 91e0 00e2 	LDS  R30,_player_2
000246 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x15:
000247 e0f0      	LDI  R31,0
000248 5de6      	SUBI R30,LOW(-_display_table*2)
000249 4fff      	SBCI R31,HIGH(-_display_table*2)
00024a 9004      	LPM  R0,Z
00024b ba08      	OUT  0x18,R0
00024c cf91      	RJMP SUBOPT_0x0
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x16:
00024d 01d3      	MOVW R26,R6
00024e e0f0      	LDI  R31,0
00024f 17ea      	CP   R30,R26
000250 07fb      	CPC  R31,R27
000251 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x17:
000252 e0f0      	LDI  R31,0
000253 9631      	ADIW R30,1
000254 15e6      	CP   R30,R6
000255 05f7      	CPC  R31,R7
000256 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR2:
000257 931a      	ST   -Y,R17
000258 930a      	ST   -Y,R16
000259 9508      	RET
                 
                 __ANEGW1:
00025a 95f1      	NEG  R31
00025b 95e1      	NEG  R30
00025c 40f0      	SBCI R31,0
00025d 9508      	RET
                 
                 __LSLB12:
00025e 23ee      	TST  R30
00025f 2e0e      	MOV  R0,R30
000260 2fea      	MOV  R30,R26
000261 f019      	BREQ __LSLB12R
                 __LSLB12L:
000262 0fee      	LSL  R30
000263 940a      	DEC  R0
000264 f7e9      	BRNE __LSLB12L
                 __LSLB12R:
000265 9508      	RET
                 
                 __MULW12U:
000266 9ffa      	MUL  R31,R26
000267 2df0      	MOV  R31,R0
000268 9feb      	MUL  R30,R27
000269 0df0      	ADD  R31,R0
00026a 9fea      	MUL  R30,R26
00026b 2de0      	MOV  R30,R0
00026c 0df1      	ADD  R31,R1
00026d 9508      	RET
                 
                 __MULD12U:
00026e 9f7a      	MUL  R23,R26
00026f 2d70      	MOV  R23,R0
000270 9f6b      	MUL  R22,R27
000271 0d70      	ADD  R23,R0
000272 9ff8      	MUL  R31,R24
000273 0d70      	ADD  R23,R0
000274 9fe9      	MUL  R30,R25
000275 0d70      	ADD  R23,R0
000276 9f6a      	MUL  R22,R26
000277 2d60      	MOV  R22,R0
000278 0d71      	ADD  R23,R1
000279 9ffb      	MUL  R31,R27
00027a 0d60      	ADD  R22,R0
00027b 1d71      	ADC  R23,R1
00027c 9fe8      	MUL  R30,R24
00027d 0d60      	ADD  R22,R0
00027e 1d71      	ADC  R23,R1
00027f 2788      	CLR  R24
000280 9ffa      	MUL  R31,R26
000281 2df0      	MOV  R31,R0
000282 0d61      	ADD  R22,R1
000283 1f78      	ADC  R23,R24
000284 9feb      	MUL  R30,R27
000285 0df0      	ADD  R31,R0
000286 1d61      	ADC  R22,R1
000287 1f78      	ADC  R23,R24
000288 9fea      	MUL  R30,R26
000289 2de0      	MOV  R30,R0
00028a 0df1      	ADD  R31,R1
00028b 1f68      	ADC  R22,R24
00028c 1f78      	ADC  R23,R24
00028d 9508      	RET
                 
                 __MULW12:
00028e d025      	RCALL __CHKSIGNW
00028f dfd6      	RCALL __MULW12U
000290 f40e      	BRTC __MULW121
000291 dfc8      	RCALL __ANEGW1
                 __MULW121:
000292 9508      	RET
                 
                 __DIVW21U:
000293 2400      	CLR  R0
000294 2411      	CLR  R1
000295 e190      	LDI  R25,16
                 __DIVW21U1:
000296 0faa      	LSL  R26
000297 1fbb      	ROL  R27
000298 1c00      	ROL  R0
000299 1c11      	ROL  R1
00029a 1a0e      	SUB  R0,R30
00029b 0a1f      	SBC  R1,R31
00029c f418      	BRCC __DIVW21U2
00029d 0e0e      	ADD  R0,R30
00029e 1e1f      	ADC  R1,R31
00029f c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0002a0 60a1      	SBR  R26,1
                 __DIVW21U3:
0002a1 959a      	DEC  R25
0002a2 f799      	BRNE __DIVW21U1
0002a3 01fd      	MOVW R30,R26
0002a4 01d0      	MOVW R26,R0
0002a5 9508      	RET
                 
                 __MODW21:
0002a6 94e8      	CLT
0002a7 ffb7      	SBRS R27,7
0002a8 c004      	RJMP __MODW211
0002a9 95b1      	NEG  R27
0002aa 95a1      	NEG  R26
0002ab 40b0      	SBCI R27,0
0002ac 9468      	SET
                 __MODW211:
0002ad fdf7      	SBRC R31,7
0002ae dfab      	RCALL __ANEGW1
0002af dfe3      	RCALL __DIVW21U
0002b0 01fd      	MOVW R30,R26
0002b1 f40e      	BRTC __MODW212
0002b2 dfa7      	RCALL __ANEGW1
                 __MODW212:
0002b3 9508      	RET
                 
                 __CHKSIGNW:
0002b4 94e8      	CLT
0002b5 fff7      	SBRS R31,7
0002b6 c002      	RJMP __CHKSW1
0002b7 dfa2      	RCALL __ANEGW1
0002b8 9468      	SET
                 __CHKSW1:
0002b9 ffb7      	SBRS R27,7
0002ba c006      	RJMP __CHKSW2
0002bb 95b1      	NEG  R27
0002bc 95a1      	NEG  R26
0002bd 40b0      	SBCI R27,0
0002be f800      	BLD  R0,0
0002bf 9403      	INC  R0
0002c0 fa00      	BST  R0,0
                 __CHKSW2:
0002c1 9508      	RET
                 
                 __SWAPW12:
0002c2 2e1b      	MOV  R1,R27
0002c3 2fbf      	MOV  R27,R31
0002c4 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
0002c5 2e1a      	MOV  R1,R26
0002c6 2fae      	MOV  R26,R30
0002c7 2de1      	MOV  R30,R1
0002c8 9508      	RET
                 
                 _delay_ms:
0002c9 9610      	adiw r26,0
0002ca f039      	breq __delay_ms1
                 __delay_ms0:
0002cb 95a8      	wdr
                +
0002cc ef8a     +LDI R24 , LOW ( 0xFA )
0002cd e090     +LDI R25 , HIGH ( 0xFA )
                +__DELAY_USW_LOOP :
0002ce 9701     +SBIW R24 , 1
0002cf f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA
0002d0 9711      	sbiw r26,1
0002d1 f7c9      	brne __delay_ms0
                 __delay_ms1:
0002d2 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega8535 register use summary:
r0 :  29 r1 :  16 r2 :  21 r3 :  12 r4 :   4 r5 :   4 r6 :   8 r7 :   4 
r8 :   4 r9 :   2 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:  11 r17:   6 r18:   0 r19:   0 r20:   0 r21:   0 r22:  14 r23:  14 
r24:  17 r25:   7 r26:  47 r27:  28 r28:   1 r29:   1 r30: 157 r31:  69 
x  :   3 y  :   4 z  :   8 
Registers used: 25 out of 35 (71.4%)

ATmega8535 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  10 add   :  14 
adiw  :   5 and   :   1 andi  :   1 asr   :   0 bclr  :   0 bld   :  14 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   7 
brge  :   3 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   3 
brlt  :   0 brmi  :   2 brne  :  14 brpl  :   1 brsh  :   1 brtc  :   2 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   7 cbi   :   2 
cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 clr   :  11 
cls   :   0 clt   :   8 clv   :   0 clz   :   0 com   :   1 cp    :   9 
cpc   :   7 cpi   :   2 cpse  :   0 dec   :   3 des   :   0 eor   :   1 
fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :   0 
inc   :   3 ld    :   2 ldd   :   0 ldi   :  75 lds   :  26 lpm   :   9 
lsl   :   4 lsr   :   0 mov   :  17 movw  :  14 mul   :  13 muls  :   0 
mulsu :   0 neg   :   6 nop   :   0 or    :   1 ori   :   2 out   :  43 
pop   :   0 push  :   0 rcall : 105 ret   :  39 reti  :   0 rjmp  :  56 
rol   :   5 ror   :   0 sbc   :   2 sbci  :   7 sbi   :   2 sbic  :   6 
sbis  :   0 sbiw  :  10 sbr   :   1 sbrc  :  14 sbrs  :   3 sec   :   0 
seh   :   0 sei   :   0 sen   :   0 ser   :   0 ses   :   0 set   :   9 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :   5 std   :   0 
sts   :  26 sub   :   2 subi  :   6 swap  :   0 tst   :   4 wdr   :   1 

Instructions used: 58 out of 114 (50.9%)

ATmega8535 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0005a6   1400     46   1446    8192  17.7%
[.dseg] 0x000060 0x0000f0      0     16     16     512   3.1%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 8 warnings
